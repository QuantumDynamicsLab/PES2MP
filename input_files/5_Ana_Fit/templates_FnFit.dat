#!/usr/bin/env python3
# -*- coding: utf-8 -*-
################################################################################
# Various analytical functions can be used to fit PES (R) or radial coefficients
# Make sure to --->
# 1. Select suitable functions readable by MOLSCAT
# 2. Use proper lower/upper limit and initial guess to avoid convergence failure
# 3. fnfit_custom: keep N terms first followed by A (for &POTL)
################################################################################

####################### Recommended Templates ##################################
#------------------------------------------------------------------------------#
# Template for constrained 2 Exponential function
#------------------------------------------------------------------------------#
def fnfit_custom(x, a1,a2):   # Enter custom function
   import numpy as np
   return  a1*np.exp(-3*x) - a2*np.exp(-2.5*x)
import numpy as np
initial_val  = [1, 1]                  # Enter initial guess
lower_bounds = [0, 0]                  # Lower bound
upper_bounds = [np.inf,np.inf]     # Upper bound

Exp_fns = 2                      # number of Exponential functions
N_Opt   = False                  # Are N values optimised
N_Vals  = [-3,-2.5]              # If N_Opt=False, enter N coeffs (in order)
A_sign  = [+1,-1]                # Enter signs of coeffs A (in order)
#------------------------------------------------------------------------------#
################################################################################
#------------------------------------------------------------------------------#
# Template for constrained 3 Exponential function
#------------------------------------------------------------------------------#
def fnfit_custom(x, a1,a2,a3):   # Enter custom function
   import numpy as np
   return  a1*np.exp(-3*x) - a2*np.exp(-2*x) + a3*np.exp(-1*x)

inf = 1e12    # np.inf for Infinity (slow convergence)
ini = 1e4     # large initial value

# [0] * 3 is equivalent to [0, 0, 0]
initial_val  = [ini] * 3     # Enter initial guess
lower_bounds = [0]   * 3     # Lower bound
upper_bounds = [inf] * 3     # Upper bound

#-------------------- Parameters for MOLSCAT &POTL ----------------------------#

Exp_fns = 3                      # number of Exponential functions
N_Opt   = False                  # Are N values optimised (A.e^(-Nx))
N_Vals  = [-3,-2,-1]             # If N_Opt=False, enter N coeffs (in order)
A_sign  = [+1,-1,-1]             # Enter signs of coeffs A (in order)
#------------------------------------------------------------------------------#
################################################################################
#------------------------------------------------------------------------------#
# Template for constrained 4 Exponential function
#------------------------------------------------------------------------------#
def fnfit_custom(x, a1,a2,a3,a4):
    import numpy as np
    return  a1*np.exp(-3.5*x)-a2*np.exp(-1.5*x)+a3*np.exp(-1*x)-a4*np.exp(-0.5*x)
import numpy as np
initial_val  = [1, 1, 1, 1]                       # Enter initial guess
lower_bounds = [0, 0, 0, 0]                       # Lower bound
upper_bounds = [np.inf, np.inf,np.inf,np.inf]     # Upper bound

#-------------------- Parameters for MOLSCAT &POTL ----------------------------#

# Enter data about custom function for printing MOLSCAT &POTL File
Exp_fns = 4                          # number of Exponential functions
N_Opt   = False                      # Are N values optimised
N_Vals  = [-3.5,-1.5,-1,-0.5]        # If N_Opt=False, enter N coeffs (in order)
A_sign  = [+1,-1,-1,+1]              # Enter signs of coeffs A (in order)
#------------------------------------------------------------------------------#
################################################################################
#------------------------------------------------------------------------------#
# Template for constrained 6 Exponential function
#------------------------------------------------------------------------------#

def fnfit_custom(x, a1,a2,a3,a4,a5,a6):
    import numpy as np
    return  a1*np.exp(-3.0*x) - a2*np.exp(-2.5*x)  + a3*np.exp(-2.0*x) -  \
            a4*np.exp(-1.5*x) + a5*np.exp(-1.25*x) - a6*np.exp(-1*x)

initial_val  = [1e4]*6                             # Initial guesses
lower_bounds = [0]  *6                             # Lower bounds
upper_bounds = [1e12]*6                             # Upper bounds

#-------------------- Parameters for MOLSCAT &POTL ----------------------------#

# Enter data about custom function for printing MOLSCAT &POTL File
Exp_fns = 6                          # number of Exponential functions
N_Opt   = False                      # Are N values optimised
N_Vals  = [-3,-2.5,-2,-1.5,-1.25,-1] # If N_Opt=False, enter N coeffs (in order)
A_sign  = [+1,-1,+1,-1,+1,-1]        # Enter signs of coeffs A (in order)
#------------------------------------------------------------------------------#
################################################################################
#------------------------------------------------------------------------------#
# Template for constrained 8 Exponential function
#------------------------------------------------------------------------------#
def fnfit_custom(x, a1,a2,a3,a4,a5,a6,a7,a8):
    import numpy as np
    return  a1*np.exp(-4*x)-a2*np.exp(-3.5*x)+a3*np.exp(-3*x)-a4*np.exp(-2.5*x) + \
            a5*np.exp(-2*x)-a6*np.exp(-1.5*x)+a7*np.exp(-1*x)-a8*np.exp(-0.5*x)
initial_val  =  [1e4]*8                    # Enter initial guess
lower_bounds =    [0]*8                    # Lower bound
upper_bounds = [1e12]*8                    # Upper bound

#-------------------- Parameters for MOLSCAT &POTL ----------------------------#

Exp_fns = 8                                # number of Exponential functions
N_Opt   = False                            # Are N values optimised
N_Vals  = [-4,-3.5,-3,-2.5,-2,-1.5,-1,-.5] # If N_Opt=False, enter N coeffs (in order)
A_sign  = [+1,-1,+1,-1,+1,-1,+1,-1]        # Enter signs of coeffs A (in order)

#------------------------------------------------------------------------------#
################################################################################
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# Template for constrained 16 Exponential function
#------------------------------------------------------------------------------#
def fnfit_custom(x,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16):
    import numpy as np
    return  a1*np.exp(-0.25*x)+a2*np.exp(-0.5*x)+a3*np.exp(-0.75*x)+a4*np.exp(-1*x) + \
            a5*np.exp(-1.25*x)+a6*np.exp(-1.5*x)+a7*np.exp(-1.75*x)+a8*np.exp(-2*x) +\
            a9*np.exp(-2.25*x)+a10*np.exp(-2.5*x)+a11*np.exp(-2.75*x)+a12*np.exp(-3*x)+\
            a13*np.exp(-3.25*x)+a14*np.exp(-3.5*x)+a15*np.exp(-3.75*x)+a16*np.exp(-4*x)
initial_val  =  [1e4]*16                    # Enter initial guess

#-------------------- Parameters for MOLSCAT &POTL ----------------------------#

Exp_fns = 16                               # number of Exponential functions
N_Opt   = False                            # Are N values optimised
N_Vals  = range(-0.25, -4.25, -0.25)       # If N_Opt=False, enter N coeffs (in order)
A_sign  = [+1]*16                          # Enter signs of coeffs A (in order)

################################################################################

################################################################################
#########  Not Recommended due to high degree of convergence failure ###########
################################################################################
# !Warning: High chances of convergence failure for non-constrained Exp_fns >= 4
#------------------------------------------------------------------------------#
# Template for full 2 Exponential function
#------------------------------------------------------------------------------#
def fnfit_custom(x, n1,n2, a1,a2):   # Enter custom function
   import numpy as np
   return  a1*np.exp(-n1*x) - a2*np.exp(-n2*x)
import numpy as np
initial_val  = [5.0, 1.0, 1, 1]                  # Enter initial guess
lower_bounds = [1.5, 0.5, 0, 0]                  # Lower bound
upper_bounds = [5.0, 1.5, np.inf,np.inf]         # Upper bound

#-------------------- Parameters for MOLSCAT &POTL ----------------------------#

Exp_fns = 2                                # number of Exponential functions
N_Opt   = True                             # Are N values optimised
A_sign  = [+1,-1]                          # Enter signs of coeffs A (in order)
#------------------------------------------------------------------------------#
################################################################################
#------------------------------------------------------------------------------#
# Template for full 3 Exponential function
#------------------------------------------------------------------------------#
def fnfit_custom(x, n1,n2,n3, a1,a2,a3):   # Enter custom function
   import numpy as np
   return  a1*np.exp(-n1*x) - a2*np.exp(-n2*x) + a3*np.exp(-n3*x)
import numpy as np
initial_val  = [5.0, 1.0, 0.1, 1, 1, 1]                  # Enter initial guess
lower_bounds = [1.5, 0.5, 0.1, 0, 0, 0]                  # Lower bound
upper_bounds = [5.0, 1.5, 0.5, np.inf,np.inf,np.inf]     # Upper bound

#-------------------- Parameters for MOLSCAT &POTL ----------------------------#

Exp_fns = 3                      # number of Exponential functions
N_Opt   = True                   # Are N values optimised (A.e^(-Nx))
A_sign  = [+1,-1,+1]             # Enter signs of coeffs A (in order)
#------------------------------------------------------------------------------#
################################################################################
#------------------------------------------------------------------------------#
# Template for full 4 Exponential function
#------------------------------------------------------------------------------#
def fnfit_custom(x, n1,n2,n3,n4, a1,a2,a3,a4):
    import numpy as np
    return  a1*np.exp(-n1*x)-a2*np.exp(-n2*x)+a3*np.exp(-n3*x)-a4*np.exp(-n4*x)
import numpy as np
initial_val  = [3.0, 1.1, 0.6, 0.1, 1, 1, 1, 1]            # Enter initial guess
lower_bounds = [1.6, 1.1, 0.6, 0.1, 0, 0, 0, 0]                    # Lower bound
upper_bounds = [5.0, 1.5, 1.0, 0.5, np.inf,np.inf,np.inf,np.inf]   # Upper bound

#-------------------- Parameters for MOLSCAT &POTL ----------------------------#

Exp_fns = 4                         # number of Exponential functions
N_Opt   = True                      # Are N values optimised
A_sign  = [+1,-1,+1,-1]             # Enter signs of coeffs A (in order)
#------------------------------------------------------------------------------#
################################################################################
